import { Injectable } from '@nestjs/common';
import * as fs from 'fs';
import axios from 'axios';
import { FoodService } from '../food/food.service';
import { OrderService } from '../order/order.service';

@Injectable()
export class ChatService {
  constructor(
    private readonly foodService: FoodService,
    private readonly orderService: OrderService,
  ) {}
  async generateReply(userMessage: string, userId: string): Promise<string> {
    try {
      console.log('[START] generateReply', { userMessage, userId });
      const [menu, orderHistory] = await Promise.all([
        this.foodService.getMenuForUser(userId),
        this.orderService.getOrderHistory(userId, 1, 5), // l·∫•y 5 ƒë∆°n g·∫ßn nh·∫•t
      ]);
      console.log('[MENU]', menu.length);
      console.log('[ORDER HISTORY]', orderHistory.items?.length);
      // T·∫°o danh s√°ch m√≥n ƒÉn
      const menuText = menu.map(restaurant => {
        const foodList = restaurant.foods
          .map(food => `- ${food.name} (${food.price}ƒë): ${food.description}`)
          .join('\n');
        return `üè™ ${restaurant.name} - ${restaurant.address}\n${foodList}`;
      }).join('\n\n');
  
      // Ph√¢n t√≠ch l·ªãch s·ª≠ m√≥n ƒÉn ƒë√£ ƒë·∫∑t
      const orderedFoods = orderHistory.items.flatMap(order =>
        order.orderDetails.map(detail => detail.foodName)
      );

      console.log('[MENU]', JSON.stringify(menu, null, 2));
      console.log('[ORDERS]', JSON.stringify(orderHistory, null, 2));
  
      const topOrdered = this.getTopItems(orderedFoods); // l·∫•y 3 m√≥n hay ƒë·∫∑t nh·∫•t
  
      const prompt = `
  B·∫°n l√† FoodieBot. Nhi·ªám v·ª•:
  - T∆∞ v·∫•n m√≥n ƒÉn ph√π h·ª£p theo l·ªãch s·ª≠ c·ªßa ng∆∞·ªùi d√πng v√† danh s√°ch m√≥n ƒÉn hi·ªán c√≥.
  
  D·ªØ li·ªáu h·ªá th·ªëng:
  ${menuText}
  
  L·ªãch s·ª≠ m√≥n ƒÉn ng∆∞·ªùi d√πng t·ª´ng ƒë·∫∑t: ${topOrdered.join(', ')}
  
  Ng∆∞·ªùi d√πng n√≥i: "${userMessage}"
  
  H√£y ph·∫£n h·ªìi th√¢n thi·ªán, ng·∫Øn g·ªçn v√† g·ª£i √Ω √≠t nh·∫•t 1 m√≥n ph√π h·ª£p v·ªõi th√≥i quen c·ªßa ng∆∞·ªùi d√πng.
  `;
  
      const response = await this.callGemini(prompt);
      return response;
    } catch (err) {
      console.error('[generateReply] L·ªói x·ª≠ l√Ω:', err.message);
      throw new Error('Kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi t·ª´ h·ªá th·ªëng.');
    }
  }
  
  private getTopItems(items: string[], top: number = 3): string[] {
    const freq = items.reduce((acc, item) => {
      acc[item] = (acc[item] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
  
    return Object.entries(freq)
      .sort((a, b) => b[1] - a[1])
      .slice(0, top)
      .map(([name]) => name);
  }
  
  private async callGemini(prompt: string): Promise<string> {
    const apiKey = process.env.GEMINI_API_KEY;
    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
  
    const response = await axios.post(
      url,
      { contents: [{ role: 'user', parts: [{ text: prompt }] }] },
      { headers: { 'Content-Type': 'application/json' } }
    );
    console.log('[RESPONSE FROM GEMINI]', JSON.stringify(response.data, null, 2));
    return response.data.candidates?.[0]?.content?.parts?.[0]?.text || 'Xin l·ªói, m√¨nh ch∆∞a r√µ.';
  }
  
}
